import { Fiber } from "./types-Bud6qf-i.js";
import * as React$1 from "react";
import { SourceMapConsumer } from "source-map-js";

//#region src/source.d.ts
interface FiberSource {
  fileName: string;
  lineNumber: number;
  columnNumber: number;
}
declare const describeBuiltInComponentFrame: (name: string) => string;
declare const getSourceMap: (url: string, content: string) => Promise<SourceMapConsumer | null>;
declare const parseStackFrame: (frame: string) => Promise<FiberSource | null>;
declare const describeNativeComponentFrame: (fn: React$1.ComponentType<unknown>, construct: boolean) => string;
declare const getCurrentDispatcher: () => React$1.RefObject<unknown> | null;
declare const setCurrentDispatcher: (value: React$1.RefObject<unknown> | null) => void;
declare const formatOwnerStack: (error: Error) => string;
declare const getFiberStackFrame: (fiber: Fiber) => string | null;
declare const getFiberSource: (fiber: Fiber) => Promise<FiberSource | null>;
declare const describeFiber: (fiber: Fiber, childFiber: null | Fiber) => string;
declare const describeDebugInfoFrame: (name: string, env?: string, _debugLocation?: unknown) => string;
declare const getFiberStackTrace: (workInProgress: Fiber) => string;
declare const isCapitalized: (str: string) => boolean;
interface OwnerStackItem {
  name: string;
  source?: FiberSource;
}
declare const getOwnerStack: (stackTrace: string) => Promise<OwnerStackItem[]>;

//#endregion
export { FiberSource, OwnerStackItem, describeBuiltInComponentFrame, describeDebugInfoFrame, describeFiber, describeNativeComponentFrame, formatOwnerStack, getCurrentDispatcher, getFiberSource, getFiberStackFrame, getFiberStackTrace, getOwnerStack, getSourceMap, isCapitalized, parseStackFrame, setCurrentDispatcher };